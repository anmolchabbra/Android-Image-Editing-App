package edu.illinois.cs.cs125.spring2019.mp1.lib;

import org.junit.Assert;
import org.junit.Test;

import java.util.Arrays;

public class MyTransformTest {
    private static final RGBAPixel FILL_VALUE = RGBAPixel.getFillValue();
    private static final int F = FILL_VALUE.getData();
    @Test
    public void testRightShift1() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2,4,6},
                {7,8,9},
                {10,12,13}
        });

        int amount = 1;

        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {F,F,F},
                {2,4,6},
                {7,8,9}
        });

        testMain(input,amount,expectedOutput,0);
    }

    @Test
    public void testRightShift2() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {0x91361c3a, 0xfe430871, 0x7f5353dc, 0x5d2b9a55, 0xb233dabb, 0xe225acf2, 0xb9d8cced, 0x6a32bf20, 0x88fe6373, 0x4f5059a9, 0xff68e450, 0xb5cc13f3, 0xdc13cbcc, 0xda90e372, 0xb3753368, 0xb7ed6729, 0x7a5166f2, 0x71034269},
                {0xb899dc87, 0x9c6ff171, 0x9eab9996, 0x80231b0a, 0x89ecfaae, 0x1f7fec, 0x713e1018, 0x9f7e33b0, 0xb1265303, 0xa6a95cf, 0x9cf1b97e, 0xefe2ef5, 0x723f5bf8, 0xe0b05f02, 0xb579bf75, 0xa68e839a, 0x56c972d0, 0x48f900b8},
                {0xb8f1a38e, 0x785c880d, 0x281c5750, 0x25b8a527, 0xade74a9b, 0x225a3912, 0xe2466726, 0x35b9651a, 0x3c35f255, 0x180fa2dc, 0x981c737f, 0x1b4a6f48, 0x3e670194, 0xf2d3305f, 0x609b4ee5, 0x3b1ac47d, 0xf7c81a33, 0xaeca33e3},
                {0x84035597, 0x6d3750ce, 0xed4d47fb, 0xe8c67331, 0xb395b77f, 0xf377f77, 0x42b56c87, 0xb43a6436, 0x82d4bd2b, 0x64522ad2, 0x855fb544, 0x739c5963, 0x39bdafa1, 0x85a9d78b, 0xb535fadf, 0x960f53e, 0xab15acb6, 0xd99c526f},
                {0x852fabe7, 0x4e51b2c3, 0xa53fd02d, 0xf828553f, 0x2c441269, 0x8c4750c7, 0xfe219cb8, 0x106d2da, 0x1a3235ce, 0x4b8200a7, 0x6e7d9ba, 0x8f9493a9, 0xa5d32657, 0x9b5f4171, 0xca3a4bdd, 0x5a041747, 0x9a726349, 0x83b31cd},
                {0x4829c9ae, 0x34e86ddc, 0xf5eaa8b4, 0x61df6cc5, 0x37ffb072, 0xe68f6029, 0x486ce6f9, 0xdc1de13b, 0xe0fa1926, 0xba3daf1c, 0x857299ca, 0xb6b9862f, 0x70d61080, 0xbc21c9fa, 0xba0b772d, 0xf36e802d, 0x2e2fda0c, 0xbd7bdcff},
                {0xab30bbcd, 0x8d16243a, 0x5b07b932, 0xdd49ec1c, 0x6281ec3e, 0x60ed504d, 0x365daf17, 0xd0805f, 0x9eb5d7d, 0xc568a47d, 0x948e65b5, 0xdfb43452, 0x6cc7f83f, 0x10719ed0, 0x53b93991, 0x7e21cb6d, 0x2565ee05, 0x20f400fc},
                {0x712fb48f, 0xf0b5b238, 0x5fb943b1, 0x7da7d9d6, 0xa030430f, 0xb9091664, 0xba5acabc, 0x88b6850f, 0xd5573e0a, 0x45511bd2, 0x4dacc351, 0xda71df5d, 0xf6b10948, 0x3452b833, 0xf527eb71, 0xa83de9d2, 0x1549a8d0, 0x6ccb43f6},
                {0xb938c33e, 0x41724a33, 0x4a9c902, 0x7340809b, 0xf56af710, 0x7d8813fe, 0x75936e15, 0x8bc5b4e2, 0x4de6357c, 0x17b95b35, 0x22c2c2b2, 0x48a05a7a, 0x7ffe88c2, 0x1f877a32, 0x9523cc29, 0xb2eb587d, 0x6b8b8129, 0x78f70e82},
                {0x6236055f, 0x13525ea7, 0xae3543fb, 0xf5d97a08, 0x22d6ba25, 0x1cc6261f, 0x808c4118, 0x46d78e46, 0x76948f9a, 0xac9168f3, 0xf6be4982, 0x219da07d, 0x480fc243, 0x62593c6f, 0xd38af591, 0x5de05de7, 0x6af791e, 0x2ba17b00},
                {0xb75f0324, 0x2e1043c1, 0x80e0aa36, 0xfa6364a9, 0x4d1bf54a, 0xb5e8e685, 0x76e58ee0, 0x7b819c79, 0xfaf439f1, 0xfd46c8e7, 0xbb02f466, 0xafcc4c1a, 0x208531e7, 0x1808d4a8, 0x8821b163, 0xb7d87b8f, 0x90299e3a, 0x6809169e},
                {0x15b7d083, 0x275171ef, 0x31c14840, 0x1dbb961e, 0x93709939, 0x6e4211e, 0x198842c3, 0xbecf1c51, 0xe391167a, 0xde0354f6, 0xc5f1cde1, 0x8e01c18e, 0x11578479, 0xd38d92aa, 0x8ee831a2, 0x7d94bb80, 0x136d41c4, 0x7c75bc39},
                {0x56addee0, 0x4652e144, 0x87abe0ef, 0x644dfdda, 0xe7671a1c, 0xc93b3899, 0x73d9aedc, 0x2ddd4efb, 0x813f978d, 0xecd116c8, 0xdd7610e0, 0x580118b4, 0xe80b76d7, 0x2ebf7d35, 0x9bb7d98f, 0xd76ccfaf, 0x8ae966a4, 0xce6aadc3},
                {0x8e361274, 0xb13f8e69, 0xdf2d5e3, 0x67d34df2, 0xf8d15546, 0x8adeb802, 0xa5c36022, 0xa0d3f119, 0x47df18e2, 0x22a2c0e8, 0x9398210f, 0xaf798381, 0x70c14127, 0x712e660c, 0xccb51e58, 0x50fb69, 0x27d6ec0a, 0xb6ae0f1d},
                {0x8aa4c9ed, 0xfff7cb5c, 0xcb2cf54d, 0xa04dee9c, 0x75a2f937, 0xd7a961fb, 0xb2c938a9, 0xc3e53ff9, 0x3d3a53d6, 0xb5f5d487, 0x991d8ebc, 0x9b73cd68, 0xf4ffa9ed, 0x523825ef, 0xda2a6f01, 0x68668bc3, 0x382d395d, 0xbf90511f},
                {0x1a0011a, 0x4666c3f8, 0xb27a5bd0, 0x563d53f0, 0xc588be46, 0x6fdcbffc, 0x9b7747d5, 0xc5fe5ccf, 0x5dd8e677, 0xefa196cf, 0x4f8cd875, 0xf1135120, 0xd2610f68, 0x3bf2b2c3, 0x78f0f3f9, 0x35efcdf0, 0x6ae5c35b, 0xbedb4314},
                {0x772750c7, 0xea3e39e7, 0x14185d3b, 0x7346cf69, 0xdd6b32f7, 0x7c2a9fd2, 0x61f99473, 0x641bb100, 0x25f77d39, 0xdb6e822e, 0x68b6d41f, 0x42d91e76, 0xfe23f8b8, 0x1d5caf4b, 0xf41b3bd1, 0x5480acfa, 0x75bc0e2d, 0xded0427c},
                {0x1afe00a4, 0x4d853c75, 0xa2698d40, 0xa5133c62, 0x99dda17, 0xbd07192f, 0xf5f1647a, 0x67dc43e0, 0x720f1a02, 0x955a2b19, 0x324efc2d, 0xb5780a0e, 0xa54fce34, 0x172ffe2b, 0x2662a725, 0x853390f3, 0x522a9de5, 0x15794c44},

        });

        int amount = 14;

        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff},
                {0x91361c3a, 0xfe430871, 0x7f5353dc, 0x5d2b9a55, 0xb233dabb, 0xe225acf2, 0xb9d8cced, 0x6a32bf20, 0x88fe6373, 0x4f5059a9, 0xff68e450, 0xb5cc13f3, 0xdc13cbcc, 0xda90e372, 0xb3753368, 0xb7ed6729, 0x7a5166f2, 0x71034269},
                {0xb899dc87, 0x9c6ff171, 0x9eab9996, 0x80231b0a, 0x89ecfaae, 0x1f7fec, 0x713e1018, 0x9f7e33b0, 0xb1265303, 0xa6a95cf, 0x9cf1b97e, 0xefe2ef5, 0x723f5bf8, 0xe0b05f02, 0xb579bf75, 0xa68e839a, 0x56c972d0, 0x48f900b8},
                {0xb8f1a38e, 0x785c880d, 0x281c5750, 0x25b8a527, 0xade74a9b, 0x225a3912, 0xe2466726, 0x35b9651a, 0x3c35f255, 0x180fa2dc, 0x981c737f, 0x1b4a6f48, 0x3e670194, 0xf2d3305f, 0x609b4ee5, 0x3b1ac47d, 0xf7c81a33, 0xaeca33e3},
                {0x84035597, 0x6d3750ce, 0xed4d47fb, 0xe8c67331, 0xb395b77f, 0xf377f77, 0x42b56c87, 0xb43a6436, 0x82d4bd2b, 0x64522ad2, 0x855fb544, 0x739c5963, 0x39bdafa1, 0x85a9d78b, 0xb535fadf, 0x960f53e, 0xab15acb6, 0xd99c526f},

        });

        testMain(input,amount,expectedOutput,0);
    }


    @Test
    public void testRightShift3() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][]{
                {2, 4, 6},
                {7, 8, 9},
                {10, 12, 13}
        });

        int amount = 2;

        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][]{
                {F, F, F},
                {F, F, F},
                {2, 4, 6}
        });
        testMain(input,amount,expectedOutput,0);
    }

    @Test
    public void testLeftShift() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2,4,6},
                {7,8,9},
                {10,12,13}
        });

        int amount = 3;

        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {F,F,F },
                {F,F,F},
                {F,F,F}
        });

        testMain(input,amount,expectedOutput,1);
    }

    @Test
    public void testLeftShift1() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2,4,6},
                {7,8,9},
                {10,12,13}
        });

        int amount = 1;

        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {7,8,9},
                {10,12,13},
                {F,F,F}
        });

        testMain(input,amount,expectedOutput,1);
    }

    @Test
    public void testLeftShift2() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2,4,6},
                {7,8,9},
                {10,12,13}
        });

        int amount = 1;

        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {7,8,9},
                {10,12,13},
                {F,F,F}
        });

        testMain(input,amount,expectedOutput,1);
    }


    @Test
    public void testUpShift1() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2,4,6},
                {7,8,9},
                {10,12,13}
        });

        int amount = 1;

        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {4,6,F},
                {8,9,F},
                {12,13,F}
        });

        testMain(input,amount,expectedOutput,3);
    }


    @Test
    public void testUpShift2() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2,4,6,14},
                {7,8,9,15},
                {10,12,13,16}
        });

        int amount = 3;

        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {14,F,F,F},
                {15,F,F,F},
                {16,F,F,F}
        });

        testMain(input,amount,expectedOutput,3);
    }

    @Test
    public void testDowntShift() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2,4,6},
                {7,8,9},
                {10,12,13}
        });

        int amount = 1;

        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {F,2,4},
                {F,7,8},
                {F,10,12}
        });

        testMain(input,amount,expectedOutput,4);
    }



    @Test
    public void testFlipVertical1() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2,4},
                {7,8}

        });

        int amount = 1;

        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {4,2},
                {8,7}
        });

        testMain(input, 0, expectedOutput,5);
    }

    @Test
    public void testFlipVertical2() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2, 4, 5, 10},
                {7, 8, 1, 13}

        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {10, 5, 4, 2},
                {13, 1, 8, 7}
        });

        testMain(input, 0, expectedOutput,5);
    }

    @Test
    public void testFlipHorizontal1() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2, 4, 5},
                {7, 8, 1}

        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {7,8,1},
                {2,4,5}
        });

        testMain(input, 0, expectedOutput,6);
    }

    @Test
    public void testFlipHorizontal2() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2, 4, 5, 10},
                {7, 8, 1, 13}

        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {7,8,1,13},
                {2,4,5,10}
        });

        testMain(input, 0, expectedOutput,6);
    }

    @Test
    public void testRotateRight1() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2, 4},
                {7, 8}

        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {4,8},
                {2,7}
        });

        testMain(input, 0, expectedOutput,7);
    }

    @Test
    public void testRotateRight2() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2, 4, 5, 12},
                {7, 8, 9, 10},
                {3, 1, 0, 15},
                {21,22,23,24}

        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {12,10,15,24},
                {5,9,0,23},
                {4,8,1,22},
                {2,7,3,21}
        });

        testMain(input, 0, expectedOutput,7);
    }

    @Test
    public void testRotateRight3() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2, 4, 5, 12},
                {7, 8, 9, 10},


        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {F,5,9,F},
                {F,4,8,F}
        });

        testMain(input, 0, expectedOutput,7);
    }

    @Test
    public void testRotateRight4() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {0xb612d2f2, 0x4fecd43b},
                {0xe6aa1696, 0x3e87f94b},
                {0xd3c52503, 0x884ecdf9},
                {0x7ace526d, 0xaa858e87},
                {0x75d4b4d3, 0xdc41de20},
                {0x2dd7537a, 0xed611134},
                {0x5cb7cf2f, 0x35a65b74},
                {0xa02d39aa, 0x240d3f95},
                {0x877bd202, 0x59ba93eb},
                {0x2f20ecbb, 0x25962a9a},
                {0x6705ad1d, 0x1a91f3ed},
                {0xec72486a, 0x4ab7c526},
                {0x9cd468a6, 0xa0c16598},
                {0x27182a3b, 0xb4a0564b},
                {0x75831ae8, 0x6768e769},
                {0xae4f636a, 0xe4461549},
                {0xcf950d3c, 0x26027c55},
                {0x5263e9f7, 0xc4f1da8b},
                {0x145bad7, 0xe7c67aa8},
                {0x8afb8540, 0xed8d79a9},

        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0x25962a9a, 0x1a91f3ed},
                {0x2f20ecbb, 0x6705ad1d},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
                {0xffffff, 0xffffff},
        });

        testMain(input, 0, expectedOutput,7);
    }
    @Test
    public void testRotateRight5() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {0x306b6815, 0x7f261b60, 0xe58988c1, 0xaf4cb687, 0x935ac646, 0xd58621d0, 0x290bfc41, 0x47ecb3a5, 0xba7eacf4, 0x1526064a, 0x85b9d7b4, 0xef0daefe, 0xe617eb0a, 0xd507262f},
                {0xe2f4e612, 0x5362cc82, 0xff73f29f, 0x1f770b1d, 0x38a973d5, 0x34c0944c, 0xd73724b8, 0xa34425fc, 0x9a06c559, 0x63f0baa3, 0xa92d41ba, 0x3eafc7f4, 0x8df703f0, 0x585eb014},
                {0x248feeb4, 0x5afd630f, 0xcb0f5131, 0x92e38e4a, 0x29ba3dcd, 0x14158505, 0x15e3ffcf, 0x4933138b, 0xf12fdd7d, 0xa5ecfbfe, 0x48d5123, 0x2c83a5a3, 0xc98a11c4, 0xdedbdc81},
                {0x4277fe5f, 0x1aabeda8, 0x9b06117b, 0xd2b444dd, 0x26f2d5ec, 0xdbeb983, 0x3d37271e, 0x9e30e38, 0x516c4104, 0x31e519ec, 0x77dc3fc9, 0xe83408b8, 0xb2691f80, 0xc37d6a0e},
                {0xf7cf1222, 0x54365fba, 0xe29c1f55, 0x863ee7f8, 0x7eaa6dc5, 0x18e7f9bb, 0xf0e8ef1, 0xeacd8058, 0x9ead1688, 0x874377db, 0xc43bcefb, 0xdf4f77, 0x9b9dd540, 0xfb891cc8},
                {0x9ef4478b, 0x54a22512, 0xe26bb28, 0x8957949c, 0xcf714fb3, 0x67898cc1, 0xd844cb7f, 0x559335cd, 0x5d30b5ba, 0x7bdfc521, 0xb2031af4, 0xde2259f1, 0x7c329de3, 0x437bf2af},
                {0x20917330, 0x1a3cac8b, 0xab3a172b, 0x4993b76c, 0xdc347072, 0x5cdedb65, 0x1d5daf35, 0x4ee9b559, 0x8278e4a4, 0xea8c2a94, 0x15b72a9c, 0x4508822f, 0x6257c76, 0x3d571d02},
                {0xfc80a171, 0xb41cd410, 0x691656e0, 0x20f0871f, 0x40783d8, 0xcd8f56d0, 0x1234a96, 0x729d2783, 0xc6f19f8d, 0xe71e0cd8, 0x58de2e2c, 0x84bcea9, 0x3381f4f6, 0x40e3200d},
                {0x73d6862f, 0xad813cec, 0x46ef070, 0x3f6ece20, 0x489ad9dc, 0x66512b05, 0x7c1593b0, 0xe1358297, 0x3fd13dcf, 0x17e8578c, 0x3d4886c4, 0x9fce910f, 0x9967798f, 0xfda0c23},
                {0x718f8fc9, 0xe878eeed, 0x43a56a88, 0x7ddef02f, 0x6c0c27a1, 0xfe9a8c1b, 0x9cc9f7e7, 0xe9395cec, 0x2bd31c46, 0xc103a0fc, 0xa37825df, 0x8369c03e, 0xfc1d1fcc, 0x554e8277},
        });
        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {0xffffff, 0xffffff, 0xef0daefe, 0x3eafc7f4, 0x2c83a5a3, 0xe83408b8, 0xdf4f77, 0xde2259f1, 0x4508822f, 0x84bcea9, 0x9fce910f, 0x8369c03e, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x85b9d7b4, 0xa92d41ba, 0x48d5123, 0x77dc3fc9, 0xc43bcefb, 0xb2031af4, 0x15b72a9c, 0x58de2e2c, 0x3d4886c4, 0xa37825df, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x1526064a, 0x63f0baa3, 0xa5ecfbfe, 0x31e519ec, 0x874377db, 0x7bdfc521, 0xea8c2a94, 0xe71e0cd8, 0x17e8578c, 0xc103a0fc, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xba7eacf4, 0x9a06c559, 0xf12fdd7d, 0x516c4104, 0x9ead1688, 0x5d30b5ba, 0x8278e4a4, 0xc6f19f8d, 0x3fd13dcf, 0x2bd31c46, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x47ecb3a5, 0xa34425fc, 0x4933138b, 0x9e30e38, 0xeacd8058, 0x559335cd, 0x4ee9b559, 0x729d2783, 0xe1358297, 0xe9395cec, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x290bfc41, 0xd73724b8, 0x15e3ffcf, 0x3d37271e, 0xf0e8ef1, 0xd844cb7f, 0x1d5daf35, 0x1234a96, 0x7c1593b0, 0x9cc9f7e7, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xd58621d0, 0x34c0944c, 0x14158505, 0xdbeb983, 0x18e7f9bb, 0x67898cc1, 0x5cdedb65, 0xcd8f56d0, 0x66512b05, 0xfe9a8c1b, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x935ac646, 0x38a973d5, 0x29ba3dcd, 0x26f2d5ec, 0x7eaa6dc5, 0xcf714fb3, 0xdc347072, 0x40783d8, 0x489ad9dc, 0x6c0c27a1, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xaf4cb687, 0x1f770b1d, 0x92e38e4a, 0xd2b444dd, 0x863ee7f8, 0x8957949c, 0x4993b76c, 0x20f0871f, 0x3f6ece20, 0x7ddef02f, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xe58988c1, 0xff73f29f, 0xcb0f5131, 0x9b06117b, 0xe29c1f55, 0xe26bb28, 0xab3a172b, 0x691656e0, 0x46ef070, 0x43a56a88, 0xffffff, 0xffffff},
        });

        testMain(input, 0, expectedOutput,7);
    }

    @Test
    public void testRotateRight6() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2, 4,6,10,15},
                {7, 8,9,13,9},
                {12,34,21,34,56}

        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {F,10,13,34,F},
                {F,6,9,21,F},
                {F,4,8,34,F}
        });

        testMain(input, 0, expectedOutput,7);
    }
    @Test
    public void testRotateLeft1() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2, 4},
                {7, 8}

        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {7,2},
                {8,4}
        });

        testMain(input, 0, expectedOutput,8);
    }

    @Test
    public void testRotateLeft2() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2, 4, 5, 12},
                {7, 8, 9, 10},
                {3, 1, 0, 15},
                {21,22,23,24}

        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {21,3,7,2},
                {22,1,8,4},
                {23,0,9,5},
                {24,15,10,12}
        });

        testMain(input, 0, expectedOutput,8);
    }

    @Test
    public void testRotateLeftt3() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {2, 4, 5, 12},
                {7, 8, 9, 10},


        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {F,8,4,F},
                {F,9,5,F}
        });

        testMain(input, 0, expectedOutput,8);
    }

    @Test
    public void testRotateLeft4() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {0xd2662458, 0x33e701d, 0xf095d681, 0x2ba99c83, 0xbd5ffefd, 0xb7591dae, 0xa7631ad1, 0xc0a237d0, 0x113eb80b, 0xc25424dd, 0xb7f0d434, 0x72a78613, 0x8c8aa7a7, 0x652a01a9, 0xf7c547c, 0xada8d43c, 0x3ff1663f, 0xa0e779d4},
                {0x63b249e2, 0xa83cabbf, 0x8952ec9c, 0x40172d47, 0x475f1ae3, 0xcdef7b52, 0x32d339b0, 0x36c8999f, 0x67ceb2f4, 0x6f825b78, 0x779242df, 0x9e7ece27, 0xf8116d61, 0x31cb1c71, 0x680e3d5c, 0x7becd858, 0xbba1beb6, 0xd310d4d3},
                {0x4d5f227b, 0x87827c21, 0x2cc285db, 0x3ece8eae, 0xb4f1bec1, 0x89291929, 0x91e09472, 0x806218d3, 0x2699d39d, 0xb21c595c, 0x775cbb5f, 0x7850489a, 0x8b0856d2, 0x5c892492, 0x71b81843, 0x57ee5d7c, 0x172982d2, 0xfa775574},
                {0xec9d65ec, 0x3b21cd6f, 0x14ecc712, 0x12d29359, 0xa1baf146, 0x64d3dad3, 0xf1929e5c, 0x5398d049, 0x78c750b, 0x68c9b66f, 0x4400f9d5, 0xec454a1f, 0xaf446e25, 0x8805a7a8, 0xbe2b9246, 0x276f121e, 0x2ebb8b5b, 0x5db14491},
                {0xc61e2107, 0x21ac1a51, 0xd19b84f5, 0xba9f085e, 0x3fb9634d, 0x889807ee, 0xc2a126ea, 0x9200ad55, 0x7bb06b63, 0x736b4cf1, 0xe74ed5df, 0xbc486686, 0x4e1e3869, 0x77b7374c, 0xd4b5a352, 0xb8ddb4ad, 0x9dea8980, 0x2a2b5a70},
                {0x3f487bd7, 0x48a72888, 0xe83d813e, 0x6d5c61a2, 0x25f11b40, 0x57444149, 0x77fbd48f, 0xdab5a4e, 0xa469d3e5, 0xc6296da5, 0x32450225, 0x6fc26bfb, 0x7aa3577e, 0xf5e5ebe5, 0x81e9780b, 0xe8e3633f, 0x41af0c4a, 0xefde193a},
                {0xa6ad4815, 0x5aa0bead, 0x830887d8, 0x30571bf4, 0xc26c6bc6, 0xd95eda6a, 0x22410c16, 0x193b846d, 0x6d0524e0, 0x58a1aa0c, 0xe015d1db, 0x38cea893, 0x4acccc24, 0x47eb845c, 0xa171eb8d, 0xd8986afe, 0xa3bc7cd2, 0xf6b12c99},
                {0x36299e3d, 0x81b77c84, 0x699ae3c3, 0x87ff4d46, 0x5ab88b74, 0xff719227, 0x462bb42, 0x4af4d57e, 0x76b322dd, 0xc585e3a1, 0x49a6a619, 0xf1139d10, 0x7e45d487, 0xc9f76fb, 0x91538bf6, 0x6f1baef, 0xf21d6b5, 0x29c88646},
                {0x842e3556, 0xb5fa0d51, 0x41efb420, 0xda6de669, 0xba14523f, 0xf9e1e1b6, 0x372d6ff5, 0x88084e92, 0x7fcd7396, 0xb69d487c, 0xaa7dc422, 0x133daf3e, 0x6d226404, 0x16b6348b, 0x34e6c913, 0x12b869d6, 0xc25979a4, 0x68ca4789},
                {0x206a28ec, 0x98fe55b9, 0x8365340b, 0x75d6a8da, 0x1287403a, 0x63facc96, 0xe3e856fe, 0x4379e09a, 0x54f8062b, 0xa671732c, 0x2ee14b4, 0xaadd49c, 0xdb4e818d, 0x513ed8f9, 0x2349976e, 0x6a8ad6f8, 0x79f60031, 0x6e6d44bb},
                {0x265a6e5a, 0xa0339cd0, 0x123aeb4d, 0xaaea4590, 0x26acec9f, 0xb8776082, 0xa7a616e9, 0xf19ff84d, 0xe1383909, 0xa8d85388, 0x312fad0b, 0x83c60b4b, 0xe98d04d0, 0xcc441ac1, 0x83dc2ec1, 0xca9997ef, 0x48aaa1c4, 0x848e1c67},
                {0xb42c8f1c, 0x214fd9e1, 0x79197de3, 0x2fb59e23, 0xa813afde, 0xd5388b44, 0x91f79512, 0x157bd8ba, 0x48ec4f56, 0x83357f21, 0x95b13b55, 0x863130e2, 0x48d2b957, 0xecaaec9d, 0x34ab9926, 0x65c690c7, 0x95ccdad9, 0xe78d3f73},
                {0x48e343eb, 0x95d70672, 0x1af3b8ea, 0x1ed9534b, 0xd30bdc5f, 0x9c4ea737, 0x1bcd8d9a, 0x95e55030, 0x20ee30c3, 0xeaf480b3, 0x297f633a, 0xbe5e1afa, 0xfa028d24, 0x3b86a201, 0x71d74c9f, 0xece70e85, 0x5a9db1bf, 0x72ca038},
                {0xa1daebf1, 0x94897fe7, 0x97288e8e, 0xc3ce9ecc, 0xc0632918, 0x9e3736c5, 0x1f3f1116, 0x297f622f, 0x33cfd5b2, 0x265eadbe, 0x7bb6569, 0x5f4e22fc, 0x978e0d7b, 0x83d4e493, 0x308f7d7f, 0x160e90f6, 0xb82eb859, 0x81ddb33c},
        });


        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {0xffffff, 0xffffff, 0x97288e8e, 0x1af3b8ea, 0x79197de3, 0x123aeb4d, 0x8365340b, 0x41efb420, 0x699ae3c3, 0x830887d8, 0xe83d813e, 0xd19b84f5, 0x14ecc712, 0x2cc285db, 0x8952ec9c, 0xf095d681, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xc3ce9ecc, 0x1ed9534b, 0x2fb59e23, 0xaaea4590, 0x75d6a8da, 0xda6de669, 0x87ff4d46, 0x30571bf4, 0x6d5c61a2, 0xba9f085e, 0x12d29359, 0x3ece8eae, 0x40172d47, 0x2ba99c83, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0xc0632918, 0xd30bdc5f, 0xa813afde, 0x26acec9f, 0x1287403a, 0xba14523f, 0x5ab88b74, 0xc26c6bc6, 0x25f11b40, 0x3fb9634d, 0xa1baf146, 0xb4f1bec1, 0x475f1ae3, 0xbd5ffefd, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x9e3736c5, 0x9c4ea737, 0xd5388b44, 0xb8776082, 0x63facc96, 0xf9e1e1b6, 0xff719227, 0xd95eda6a, 0x57444149, 0x889807ee, 0x64d3dad3, 0x89291929, 0xcdef7b52, 0xb7591dae, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x1f3f1116, 0x1bcd8d9a, 0x91f79512, 0xa7a616e9, 0xe3e856fe, 0x372d6ff5, 0x462bb42, 0x22410c16, 0x77fbd48f, 0xc2a126ea, 0xf1929e5c, 0x91e09472, 0x32d339b0, 0xa7631ad1, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x297f622f, 0x95e55030, 0x157bd8ba, 0xf19ff84d, 0x4379e09a, 0x88084e92, 0x4af4d57e, 0x193b846d, 0xdab5a4e, 0x9200ad55, 0x5398d049, 0x806218d3, 0x36c8999f, 0xc0a237d0, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x33cfd5b2, 0x20ee30c3, 0x48ec4f56, 0xe1383909, 0x54f8062b, 0x7fcd7396, 0x76b322dd, 0x6d0524e0, 0xa469d3e5, 0x7bb06b63, 0x78c750b, 0x2699d39d, 0x67ceb2f4, 0x113eb80b, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x265eadbe, 0xeaf480b3, 0x83357f21, 0xa8d85388, 0xa671732c, 0xb69d487c, 0xc585e3a1, 0x58a1aa0c, 0xc6296da5, 0x736b4cf1, 0x68c9b66f, 0xb21c595c, 0x6f825b78, 0xc25424dd, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x7bb6569, 0x297f633a, 0x95b13b55, 0x312fad0b, 0x2ee14b4, 0xaa7dc422, 0x49a6a619, 0xe015d1db, 0x32450225, 0xe74ed5df, 0x4400f9d5, 0x775cbb5f, 0x779242df, 0xb7f0d434, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x5f4e22fc, 0xbe5e1afa, 0x863130e2, 0x83c60b4b, 0xaadd49c, 0x133daf3e, 0xf1139d10, 0x38cea893, 0x6fc26bfb, 0xbc486686, 0xec454a1f, 0x7850489a, 0x9e7ece27, 0x72a78613, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x978e0d7b, 0xfa028d24, 0x48d2b957, 0xe98d04d0, 0xdb4e818d, 0x6d226404, 0x7e45d487, 0x4acccc24, 0x7aa3577e, 0x4e1e3869, 0xaf446e25, 0x8b0856d2, 0xf8116d61, 0x8c8aa7a7, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x83d4e493, 0x3b86a201, 0xecaaec9d, 0xcc441ac1, 0x513ed8f9, 0x16b6348b, 0xc9f76fb, 0x47eb845c, 0xf5e5ebe5, 0x77b7374c, 0x8805a7a8, 0x5c892492, 0x31cb1c71, 0x652a01a9, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x308f7d7f, 0x71d74c9f, 0x34ab9926, 0x83dc2ec1, 0x2349976e, 0x34e6c913, 0x91538bf6, 0xa171eb8d, 0x81e9780b, 0xd4b5a352, 0xbe2b9246, 0x71b81843, 0x680e3d5c, 0xf7c547c, 0xffffff, 0xffffff},
                {0xffffff, 0xffffff, 0x160e90f6, 0xece70e85, 0x65c690c7, 0xca9997ef, 0x6a8ad6f8, 0x12b869d6, 0x6f1baef, 0xd8986afe, 0xe8e3633f, 0xb8ddb4ad, 0x276f121e, 0x57ee5d7c, 0x7becd858, 0xada8d43c, 0xffffff, 0xffffff},
        });

        testMain(input, 0, expectedOutput,8);
    }

    @Test
    public void testExpandVerticalTest1() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {0x65d97b89, 0xc847b33c, 0xe7b28107, 0xfde95e5, 0x56ff6262, 0xf0621251},
                {0x6c1ea60e, 0x2fbfe861, 0x4587ceff, 0x24ab0ae0, 0x745bcf68, 0x4b32884d},
                {0x781ee3ba, 0x3d74b61f, 0xbf4ef60d, 0xa82ff4b1, 0xa89ef989, 0xbea80b8c},
                {0x8fa39312, 0x27887f85, 0xb7524e6, 0xcd7f9c2e, 0xb3298354, 0x3617b3a1},



        });

        int amount = 2;
        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {0xe7b28107, 0xe7b28107, 0xe7b28107, 0xfde95e5, 0xfde95e5, 0xfde95e5},
                {0x4587ceff, 0x4587ceff, 0x4587ceff, 0x24ab0ae0, 0x24ab0ae0, 0x24ab0ae0},
                {0xbf4ef60d, 0xbf4ef60d, 0xbf4ef60d, 0xa82ff4b1, 0xa82ff4b1, 0xa82ff4b1},
                {0xb7524e6, 0xb7524e6, 0xb7524e6, 0xcd7f9c2e, 0xcd7f9c2e, 0xcd7f9c2e},
        });

        testMain(input, 5, expectedOutput,9);
    }


    @Test
    public void testExpandVerticalTest2() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {0xaaa6cc1d, 0x94b529f2},
                {0x75494b25, 0x62065efc},
                {0x910b3f24, 0x7627236c},
                {0x6eeef08c, 0x681074d3},
                {0xf8eaaff4, 0x9ab50fd1},
                {0xac6ed758, 0xc7c2a76d},
                {0xa1ab1cf2, 0x6041736c},
                {0x359c1d1b, 0xd1af3e3e},
                {0xae4fae8, 0x7d56837d},
                {0x800da417, 0x7f8cef12},
                {0xb05bfca1, 0xb3339323},
                {0x3bacbca1, 0x23e02f8},
                {0x861c5687, 0x5e8b1448},
                {0xb6dbc5bb, 0x29ee2f55},


        });

        int amount = 3;
        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {0xaaa6cc1d, 0x94b529f2},
                {0x75494b25, 0x62065efc},
                {0x910b3f24, 0x7627236c},
                {0x6eeef08c, 0x681074d3},
                {0xf8eaaff4, 0x9ab50fd1},
                {0xac6ed758, 0xc7c2a76d},
                {0xa1ab1cf2, 0x6041736c},
                {0x359c1d1b, 0xd1af3e3e},
                {0xae4fae8, 0x7d56837d},
                {0x800da417, 0x7f8cef12},
                {0xb05bfca1, 0xb3339323},
                {0x3bacbca1, 0x23e02f8},
                {0x861c5687, 0x5e8b1448},
                {0xb6dbc5bb, 0x29ee2f55},
        });

        testMain(input, 3, expectedOutput,9);
    }


    @Test
    public void testExpandVerticalTest3() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {0xea2a29e7, 0x377050ba, 0xdfdfc8df, 0x6eb4936d, 0x96ac482e, 0xd750bd23, 0x5919b22b, 0x51ddafe2, 0x3846a3b, 0x30ec9904, 0x20f7f7aa, 0x627c6463},
                {0xb71e550a, 0x373ef531, 0xd5302028, 0xea67b4da, 0xc36f66db, 0x9310d77f, 0x63365eac, 0x455ee7b3, 0xfc33f0c5, 0xa9f5020e, 0xa679a94f, 0x2e381d6e},
                {0xf5c4bae6, 0x42169732, 0x89448075, 0xbe5f46e6, 0xd97c50bc, 0x8d5e0127, 0x327f230b, 0x6c174589, 0x917f4e9, 0x60f2f080, 0xe61846f4, 0xc65e9087},
                {0x59badb14, 0x326b9340, 0x280aa84b, 0x796c180f, 0xd24152cc, 0x3b716abf, 0x97954ea9, 0x8a73d76a, 0x199519d4, 0x862309f2, 0xeead9d03, 0xdabab560},
                {0x9cb76b98, 0x58fd6121, 0x232f268d, 0x8a837a83, 0x3b6b7250, 0x24fe4f12, 0xe76a6d1, 0x77477d19, 0x3600ea15, 0x1a7367e, 0x45a318a, 0x860792e6},
                {0x976413da, 0x6694f132, 0xe1eec7f1, 0xa3de7d52, 0xadeef22c, 0xa418f1bf, 0xe7adc9d6, 0x25710040, 0x54387b51, 0x7713ca2e, 0xf3a61863, 0xb20323a4},
                {0x8f611c3, 0x4011c1d8, 0x26383414, 0x904ca38, 0x6f65e0de, 0xd9498ce5, 0x9b77f46, 0x5c251c52, 0x3facb60f, 0xb61d9366, 0xd38a185a, 0xf11e73a0},
                {0xe6906265, 0x675f7112, 0x1fda7638, 0xb4045201, 0x6a6a1e6c, 0xdb1d93e5, 0x479bb6c7, 0x27af9780, 0x38c196b4, 0x6daa6e2a, 0x7fda899d, 0xd5d6d080},
                {0xb4354a2b, 0xa4b4be6d, 0x9498bb3e, 0xf7548203, 0x3df7aca, 0x94fa64fe, 0xed8764f3, 0x6069fc32, 0x8b46ee56, 0x68b7cd82, 0x47c766d6, 0x79398ab6},
                {0x21ed2a28, 0xd8f04727, 0xf7d33887, 0xb3f92f22, 0x999285b6, 0x5e0a16ad, 0xb3d1dda6, 0x21eaffa4, 0x13868d4d, 0x6fb8e28, 0x90ffe2c3, 0xa9bd85ca},
                {0xd7403f7b, 0xf5f2304c, 0x7287d965, 0x6e6f61e8, 0x5c0c26c2, 0x5c3e6ace, 0xdb39216, 0x7036de81, 0x8919f43a, 0x7d64b143, 0x47325e6, 0xbaacd7a2},
                {0x97e75bbc, 0x8dc088d2, 0x2e3d6388, 0x4c1e98ac, 0xf33edd97, 0xb1be3818, 0x409c7eff, 0xfbc49730, 0xe794139b, 0xa1cfa054, 0x5f4fc735, 0xc9fe7e16},
                {0x94ecbcd1, 0x294b5532, 0x41eb7b1b, 0x8967371e, 0x9c60c77, 0xf9ccd6e2, 0x32e9fb81, 0x4001683c, 0x2e3ac8be, 0x8f812735, 0x4d3cee3, 0x171091b},
                {0x4377ab98, 0x3fa21c03, 0x747b0912, 0x1675b242, 0xf888f08e, 0x7183bba, 0x54bf6179, 0xbfe5777, 0x3ae908f4, 0x684d166f, 0x3b1a7627, 0xf73457c3},
                {0x43dadf0f, 0x5d34a5ce, 0xcfbd4118, 0x15f721bf, 0x1728e85, 0x8d14c8bf, 0xbadcdb68, 0x469933d8, 0x5a6cef7, 0xd5cf93da, 0xaeaa90c6, 0xe838d9f8},
                {0x8fd3c2b2, 0x497872b2, 0xb3cf9b5a, 0x330fd4aa, 0xfa429f04, 0xd3b4d7db, 0x3a9b19c8, 0x51656c17, 0x9e1e8108, 0xe2fd0b4a, 0x5552b05f, 0x5a8173ed},
                {0xe8c535be, 0x74461fc7, 0xd13aa0b0, 0xb4c3264f, 0x17a74b5c, 0xce338372, 0xd7eb9d3f, 0xf1ee29ce, 0x9189910a, 0x53da9edf, 0x104a4aa9, 0x161d2956},
                {0x843cf6ad, 0x8d6df9c1, 0xd5334c59, 0x85588255, 0xa4d98e1c, 0x697972e8, 0x31b66d47, 0xea5ff2bf, 0x58ad2749, 0x86d100b6, 0xa94ea532, 0xef58395e},
        });

        int amount = 7;
        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {0xd750bd23, 0xd750bd23, 0xd750bd23, 0xd750bd23, 0xd750bd23, 0xd750bd23, 0x5919b22b, 0x5919b22b, 0x5919b22b, 0x5919b22b, 0x5919b22b, 0x5919b22b},
                {0x9310d77f, 0x9310d77f, 0x9310d77f, 0x9310d77f, 0x9310d77f, 0x9310d77f, 0x63365eac, 0x63365eac, 0x63365eac, 0x63365eac, 0x63365eac, 0x63365eac},
                {0x8d5e0127, 0x8d5e0127, 0x8d5e0127, 0x8d5e0127, 0x8d5e0127, 0x8d5e0127, 0x327f230b, 0x327f230b, 0x327f230b, 0x327f230b, 0x327f230b, 0x327f230b},
                {0x3b716abf, 0x3b716abf, 0x3b716abf, 0x3b716abf, 0x3b716abf, 0x3b716abf, 0x97954ea9, 0x97954ea9, 0x97954ea9, 0x97954ea9, 0x97954ea9, 0x97954ea9},
                {0x24fe4f12, 0x24fe4f12, 0x24fe4f12, 0x24fe4f12, 0x24fe4f12, 0x24fe4f12, 0xe76a6d1, 0xe76a6d1, 0xe76a6d1, 0xe76a6d1, 0xe76a6d1, 0xe76a6d1},
                {0xa418f1bf, 0xa418f1bf, 0xa418f1bf, 0xa418f1bf, 0xa418f1bf, 0xa418f1bf, 0xe7adc9d6, 0xe7adc9d6, 0xe7adc9d6, 0xe7adc9d6, 0xe7adc9d6, 0xe7adc9d6},
                {0xd9498ce5, 0xd9498ce5, 0xd9498ce5, 0xd9498ce5, 0xd9498ce5, 0xd9498ce5, 0x9b77f46, 0x9b77f46, 0x9b77f46, 0x9b77f46, 0x9b77f46, 0x9b77f46},
                {0xdb1d93e5, 0xdb1d93e5, 0xdb1d93e5, 0xdb1d93e5, 0xdb1d93e5, 0xdb1d93e5, 0x479bb6c7, 0x479bb6c7, 0x479bb6c7, 0x479bb6c7, 0x479bb6c7, 0x479bb6c7},
                {0x94fa64fe, 0x94fa64fe, 0x94fa64fe, 0x94fa64fe, 0x94fa64fe, 0x94fa64fe, 0xed8764f3, 0xed8764f3, 0xed8764f3, 0xed8764f3, 0xed8764f3, 0xed8764f3},
                {0x5e0a16ad, 0x5e0a16ad, 0x5e0a16ad, 0x5e0a16ad, 0x5e0a16ad, 0x5e0a16ad, 0xb3d1dda6, 0xb3d1dda6, 0xb3d1dda6, 0xb3d1dda6, 0xb3d1dda6, 0xb3d1dda6},
                {0x5c3e6ace, 0x5c3e6ace, 0x5c3e6ace, 0x5c3e6ace, 0x5c3e6ace, 0x5c3e6ace, 0xdb39216, 0xdb39216, 0xdb39216, 0xdb39216, 0xdb39216, 0xdb39216},
                {0xb1be3818, 0xb1be3818, 0xb1be3818, 0xb1be3818, 0xb1be3818, 0xb1be3818, 0x409c7eff, 0x409c7eff, 0x409c7eff, 0x409c7eff, 0x409c7eff, 0x409c7eff},
                {0xf9ccd6e2, 0xf9ccd6e2, 0xf9ccd6e2, 0xf9ccd6e2, 0xf9ccd6e2, 0xf9ccd6e2, 0x32e9fb81, 0x32e9fb81, 0x32e9fb81, 0x32e9fb81, 0x32e9fb81, 0x32e9fb81},
                {0x7183bba, 0x7183bba, 0x7183bba, 0x7183bba, 0x7183bba, 0x7183bba, 0x54bf6179, 0x54bf6179, 0x54bf6179, 0x54bf6179, 0x54bf6179, 0x54bf6179},
                {0x8d14c8bf, 0x8d14c8bf, 0x8d14c8bf, 0x8d14c8bf, 0x8d14c8bf, 0x8d14c8bf, 0xbadcdb68, 0xbadcdb68, 0xbadcdb68, 0xbadcdb68, 0xbadcdb68, 0xbadcdb68},
                {0xd3b4d7db, 0xd3b4d7db, 0xd3b4d7db, 0xd3b4d7db, 0xd3b4d7db, 0xd3b4d7db, 0x3a9b19c8, 0x3a9b19c8, 0x3a9b19c8, 0x3a9b19c8, 0x3a9b19c8, 0x3a9b19c8},
                {0xce338372, 0xce338372, 0xce338372, 0xce338372, 0xce338372, 0xce338372, 0xd7eb9d3f, 0xd7eb9d3f, 0xd7eb9d3f, 0xd7eb9d3f, 0xd7eb9d3f, 0xd7eb9d3f},
                {0x697972e8, 0x697972e8, 0x697972e8, 0x697972e8, 0x697972e8, 0x697972e8, 0x31b66d47, 0x31b66d47, 0x31b66d47, 0x31b66d47, 0x31b66d47, 0x31b66d47},
        });

        testMain(input, 7, expectedOutput,9);
    }

    @Test
    public void testExpandHorizontalTest1() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {0x872d5966, 0x18f6b2a9, 0x3a007ecd, 0xf20b56a0},
                {0x5b2a072d, 0xcb6f28c3, 0xae5b9281, 0x652ff6e7},
                {0x2a2308e9, 0x1eef5a8d, 0xc023c759, 0x30b7bcd5},
                {0xa277ab61, 0xb0db8d8d, 0xe81ac08, 0x8663846b},
                {0x4ddf07a8, 0x1e616cce, 0x704bd342, 0x5f1d9723},
                {0x22f55e5, 0x458a1ab8, 0x5b8e80af, 0xe824dc5c},
                {0x2702c83f, 0xdec31743, 0xf67a2386, 0x81a12750},
                {0xda4cbb56, 0x8b99c3a4, 0x4dcbdf49, 0x5fcdbc41},
                {0x9cd02863, 0x817ca07f, 0x2b39dba, 0x62fe6e27},
                {0x738f7a1e, 0x2219bbe1, 0xaedc1c78, 0xf88f2567},
                {0xa14ed953, 0xd6c5518, 0xd33a56bb, 0xbc21afdc},
                {0x4a954943, 0xc0a8989c, 0x500d7b55, 0x92c8860a},
                {0x93f1a79d, 0x1f19ee34, 0x13b5ed72, 0x72453b37},
                {0x7c3847c5, 0xba18d264, 0x1c805237, 0xcd5bfad1},
                {0x6057e397, 0xdd2af074, 0x1065e20c, 0x4e9d8b05},
                {0xbd477af7, 0x9d74af97, 0x908f3023, 0x9eb9286b},
                {0xf119c01, 0x1341db39, 0x6492d2bb, 0xb28608bf},
                {0xbcb224e4, 0x28986dd1, 0x35b98c55, 0x7f7e36de},
                {0x226c0852, 0x44a55d41, 0xc780cbd9, 0x5f19a242},
                {0x73a5d2c1, 0x7622e941, 0x3d94136d, 0x21f34034},
        });

        int amount = 2;
        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {0x22f55e5, 0x458a1ab8, 0x5b8e80af, 0xe824dc5c},
                {0x22f55e5, 0x458a1ab8, 0x5b8e80af, 0xe824dc5c},
                {0x2702c83f, 0xdec31743, 0xf67a2386, 0x81a12750},
                {0x2702c83f, 0xdec31743, 0xf67a2386, 0x81a12750},
                {0xda4cbb56, 0x8b99c3a4, 0x4dcbdf49, 0x5fcdbc41},
                {0xda4cbb56, 0x8b99c3a4, 0x4dcbdf49, 0x5fcdbc41},
                {0x9cd02863, 0x817ca07f, 0x2b39dba, 0x62fe6e27},
                {0x9cd02863, 0x817ca07f, 0x2b39dba, 0x62fe6e27},
                {0x738f7a1e, 0x2219bbe1, 0xaedc1c78, 0xf88f2567},
                {0x738f7a1e, 0x2219bbe1, 0xaedc1c78, 0xf88f2567},
                {0xa14ed953, 0xd6c5518, 0xd33a56bb, 0xbc21afdc},
                {0xa14ed953, 0xd6c5518, 0xd33a56bb, 0xbc21afdc},
                {0x4a954943, 0xc0a8989c, 0x500d7b55, 0x92c8860a},
                {0x4a954943, 0xc0a8989c, 0x500d7b55, 0x92c8860a},
                {0x93f1a79d, 0x1f19ee34, 0x13b5ed72, 0x72453b37},
                {0x93f1a79d, 0x1f19ee34, 0x13b5ed72, 0x72453b37},
                {0x7c3847c5, 0xba18d264, 0x1c805237, 0xcd5bfad1},
                {0x7c3847c5, 0xba18d264, 0x1c805237, 0xcd5bfad1},
                {0x6057e397, 0xdd2af074, 0x1065e20c, 0x4e9d8b05},
                {0x6057e397, 0xdd2af074, 0x1065e20c, 0x4e9d8b05},
        });

        testMain(input, 2, expectedOutput,10);
    }

    @Test
    public void testExpandHorizontalTest2() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {0x353618c9, 0x1b3e3e39, 0xb96550bb, 0x1cb56f0e, 0xdfb35f96, 0x6f3d2518},
                {0xf7e99ee7, 0x99242dde, 0x8d9b0b9f, 0x5fad4cf4, 0x902be380, 0x25ac6cc9},
                {0xf8dad5c3, 0xf745ac4d, 0x7231caef, 0x7aedbc08, 0x54639364, 0xaa54a670},
                {0x9336cc76, 0xa1c95067, 0x5f1c5363, 0x16153e6e, 0xfc60ed7f, 0xb5ebe47},
                {0x59e61d8b, 0xc56e58e8, 0xbb6d7c58, 0x71f80f09, 0x6f645682, 0x2117b178},
                {0x9b2dd85c, 0x692b3625, 0x216d82a9, 0x4f2d06cb, 0xea148752, 0x355d5b38},
                {0x982cfaa5, 0xf0a8dd5f, 0xd79722f5, 0x8acac90c, 0xeba7096a, 0x9f8f8f76},
                {0xe6092a2c, 0x25efb1d0, 0x2794f82b, 0x6b159fd, 0x5f0408f6, 0xff23b1b2}
        });

        int amount = 3;
        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {0xf8dad5c3, 0xf745ac4d, 0x7231caef, 0x7aedbc08, 0x54639364, 0xaa54a670},
                {0x9336cc76, 0xa1c95067, 0x5f1c5363, 0x16153e6e, 0xfc60ed7f, 0xb5ebe47},
                {0x9336cc76, 0xa1c95067, 0x5f1c5363, 0x16153e6e, 0xfc60ed7f, 0xb5ebe47},
                {0x9336cc76, 0xa1c95067, 0x5f1c5363, 0x16153e6e, 0xfc60ed7f, 0xb5ebe47},
                {0x59e61d8b, 0xc56e58e8, 0xbb6d7c58, 0x71f80f09, 0x6f645682, 0x2117b178},
                {0x59e61d8b, 0xc56e58e8, 0xbb6d7c58, 0x71f80f09, 0x6f645682, 0x2117b178},
                {0x59e61d8b, 0xc56e58e8, 0xbb6d7c58, 0x71f80f09, 0x6f645682, 0x2117b178},
                {0x9b2dd85c, 0x692b3625, 0x216d82a9, 0x4f2d06cb, 0xea148752, 0x355d5b38},
        });

        testMain(input, 3, expectedOutput,10);
    }


    @Test
    public void testGreenScreen1() {
        RGBAPixel[][] input = RGBAPixel.fromIntArray(new int[][] {
                {0xFF00FF00, 1},
                {1, 0}
        });

        int amount = 7;
        RGBAPixel[][] expectedOutput = RGBAPixel.fromIntArray(new int[][] {
                {0x00FFFFFF, 1},
                {1, 0}
        });

        testMain(input, 0, expectedOutput,13);
    }

    private void testMain(RGBAPixel[][] input, int amount, RGBAPixel[][] expectedOutput, int functionSelector) {
        RGBAPixel[][] output = null;
        if (functionSelector == 0) {
            output = Transform.shiftRight(input, amount);
        } else if (functionSelector == 1) {
            output = Transform.shiftLeft(input, amount);
        } else if (functionSelector == 2) {
            output = Transform.shiftUp(input, amount);
        } else if (functionSelector == 3){
            output = Transform.shiftUp(input, amount);
        } else if (functionSelector == 4) {
            output = Transform.shiftDown(input, amount);
        } else if (functionSelector == 5) {
            output = Transform.flipVertical(input);
        } else if (functionSelector == 6) {
            output = Transform.flipHorizontal(input);
        } else if (functionSelector == 7) {
            output = Transform.rotateRight(input);
        } else if (functionSelector == 8) {
            output = Transform.rotateLeft(input);
        } else if (functionSelector == 9) {
            output = Transform.expandVertical(input, amount);
        } else if (functionSelector == 10) {
            output = Transform.expandHorizontal(input, amount);
        }
        RGBAPixel[][] copyOfInput = RGBAPixel.copyArray(input);
        Assert.assertTrue("Expected:\n" + RGBAPixel.printArray(expectedOutput)
                        + "\nFound:\n" + RGBAPixel.printArray(output)
                        + "\nDiff:\n" + RGBAPixel.diffArrays(output, expectedOutput) + "\n",
                Arrays.deepEquals(output, expectedOutput));
        Assert.assertTrue("Input array was modified", Arrays.deepEquals(input, copyOfInput));
    }
}
